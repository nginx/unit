name: ci

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  test:
    name: ${{ matrix.os }}-${{  matrix.arch }}-${{ matrix.build }}
    runs-on: ${{ matrix.os }}-${{  matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        os: 
          - ubuntu-22.04
          - ubuntu-23.10
          - debian-11
          - debian-12
          - alpine-3.19
          - rhel-9
          - amazonlinux-2023
        arch:
          - amd64
          - arm64
        build: 
           # Core
          - unit
           # Modules
          - go-1.21
          - go-1.22
          - java-17
          - java-18
          - java-21
          - node-20
          - node-21
          - perl
          - php-8.2
          - php-8.3
          - python-3.9
          - python-3.10
          - python-3.11
          - python-3.12
          - ruby
          - wasm
          - wasm-wasi-component

    steps:
      - uses: actions/checkout@v4

      # Provides module, language version and testpath from build name
      - name: Output build metadata
        id: metadata
        run: |
          if [ "${{ matrix.build }}" = "wasm-wasi-component" ]; then
            module="wasm-wasi-component"
          else
            # Split the build name by '-' into module and version
            IFS='-' read -r module version <<< "${{ matrix.build }}"
          fi

          testpath="test/test_${module}*"

          # Run all tests for "unit" and "python"
          # Python is the default module for tests
          if [ "$module" = "unit" ] || [ "$module" = "python" ]; then
            testpath="test"
          fi

          echo "module=${module}" >> "$GITHUB_OUTPUT"
          echo "version=${version}" >> "$GITHUB_OUTPUT"
          echo "testpath=${testpath}" >> "$GITHUB_OUTPUT"

          NJS_VERSION=$(sed -n "s/NJS_VERSION := \(.*\)/\1/p" pkg/contrib/src/njs/version)
          echo "njs_version=${NJS_VERSION}" >> "$GITHUB_OUTPUT"

          cat "$GITHUB_OUTPUT"

      - name: Setup requirements
        id: setup_reqs
        run: |
          set -x
          sudo .github/scripts/setup.sh ${{ matrix.os }}

      ##
      ## njs
      ##

      - name: Clone njs repository
        uses: actions/checkout@v4
        with:
          repository: nginx/njs
          ref: '${{ steps.metadata.outputs.njs_version }}'
          path: njs

      - name: Make njs
        run: |
          ./configure --no-libxml2 --no-zlib
          make -j4 -k
        working-directory: njs

      ##
      ## Unit
      ##

      - name: Configure unit
        run: |
          ./configure \
            --tests \
            --openssl \
            --njs \
            --cc-opt="-I njs/src/ -I njs/build"  \
            --ld-opt="-L njs/build"

      - name: Make unit
        run: |
          make -j4 -k || make

      ##
      ## Go
      ##

      - uses: actions/setup-go@v5
        with:
          go-version: '${{ steps.metadata.outputs.version }}'
          cache: false
        if: steps.metadata.outputs.module == 'go'

      - name: Configure go
        run: |
          ./configure go --go-path=
        if: steps.metadata.outputs.module == 'go'

      - name: Make go
        run: |
          make go
          make go-install
        if: steps.metadata.outputs.module == 'go'

      ##
      ## Java
      ##
      - name: Configure java
        id: setupjava
        run: |
          set -x
          JVERSION=${{ steps.metadata.outputs.version }}
          JC=`find /usr/lib/jvm -name javac | grep $JVERSION | head -1`
          JHOME=`dirname "$JC"`; JHOME=`dirname "$JHOME"`; #strips /bin/javac
          SUM=`which sha512sum`
          if [ "$JHOME" != "." -a -d "$JHOME" ]; then
            echo java=true >> $GITHUB_OUTPUT
            ./configure java --home=$JHOME --sha512=$SUM
          fi

        if: steps.metadata.outputs.module == 'java'

      - name: Make java
        run: |
          make java
        if: steps.metadata.outputs.module == 'java' && steps.setupjava.outputs.java == 'true'

      ##
      ## Node
      ##

      - uses: actions/setup-node@v4
        with:
          node-version: '${{ steps.metadata.outputs.version }}'
        if: steps.metadata.outputs.module == 'node' && matrix.os != 'alpine-3.19'

      - name: Install node-gyp
        run: |
          npm install -g node-gyp
        if: steps.metadata.outputs.module == 'node' && matrix.os != 'alpine-3.19'

      - name: Configure node
        run: |
          ./configure nodejs
        if: steps.metadata.outputs.module == 'node' && matrix.os != 'alpine-3.19'

      - name: Make node
        run: |
          make node-local-install DESTDIR=node
        if: steps.metadata.outputs.module == 'node' && matrix.os != 'alpine-3.19'

      ##
      ## Perl
      ##

      # Uses default Actions VM Perl
      # https://github.com/actions/runner-images#available-images

      - name: Configure perl
        run: |
          ./configure perl
        if: steps.metadata.outputs.module == 'perl'

      - name: Make perl
        run: |
          make perl
        if: steps.metadata.outputs.module == 'perl'

      ##
      ## PHP
      ##

      - name: Configure php
        id: setupphp
        run: |
          
          PHPV=`echo ${{ steps.metadata.outputs.version }}`
          for V in $PHPV `echo $PHPV | tr -d .` ""; do
            PHPC=`which php-config$V || echo -n `
            test -n "$PHPC" && break
          done;
          if [ "${{ matrix.os }}" = "alpine-3.19" ]; then
            V=`echo $PHPV | tr -d .`
            sudo ln -s /usr/lib/libphp$V.so /usr/lib/libphp.so
          fi ;
          if test -n $PHPC && $PHPC --version | grep -qF "$PHPV"; then
            ./configure php --config=$PHPC && echo "php=true" > $GITHUB_OUTPUT
          else
            echo 'php=false' > $GITHUB_OUTPUT
          fi
         

        if: steps.metadata.outputs.module == 'php'

      - name: Make php
        run: |
          make php
        if: steps.metadata.outputs.module == 'php' && steps.setupphp.outputs.php == 'true'

      ##
      ## Python 3
      ##

      - name: Configure python3
        id: setuppython
        run: |
          set -x
          PYTHONV=${{ steps.metadata.outputs.version }}
          for V in $PYTHONV `echo $PYTHONV | tr -d .` ""; do
            PCONF=`which python$V-config || echo -n`
            PYTH=`which python$V || echo -n`
            test -n "$PCONF" && break
          done
          if  test -n "$PYTH" && $PYTH --version | grep -qF "$PYTHONV"; then
            ./configure python --config=$PCONF && echo 'python=true' >> $GITHUB_OUTPUT
          fi
        if: steps.metadata.outputs.module == 'python'

      - name: Make python3
        run: |
          make python${{ steps.metadata.outputs.version }}
        if: steps.metadata.outputs.module == 'python' && steps.setuppython.outputs.python == 'true'

      ##
      ## Ruby
      ##

      - name: Configure ruby
        id: setupruby
        run: |
          if which ruby; then
            gem install --user-install rack # tests need rack
            ./configure ruby
            echo 'ruby=true' >> $GITHUB_OUTPUT
          fi
        if: steps.metadata.outputs.module == 'ruby'

      - name: Make ruby
        run: |
          make ruby
        if: steps.metadata.outputs.module == 'ruby' && steps.setupruby.outputs.ruby == 'true'

      ##
      ## Rust
      ##

      - name: Setup rust
        run: |
          if ! which cargo; then
            curl -sSf https://sh.rustup.rs | sh -s -- -y
          fi
        if: steps.metadata.outputs.module == 'wasm-wasi-component' || steps.metadata.outputs.module == 'wasm'

      ##
      ## Wasm
      ##

      - name: Make wasmtime
        run: |
          which cargo || source $HOME/.cargo/env && which cargo
          make -C pkg/contrib .wasmtime
        if: steps.metadata.outputs.module == 'wasm'

      - name: Configure wasm
        run: |
          which cargo || source $HOME/.cargo/env && which cargo
          ./configure wasm --include-path=pkg/contrib/wasmtime/crates/c-api/include --lib-path=pkg/contrib/wasmtime/target/release
        if: steps.metadata.outputs.module == 'wasm'

      - name: Make wasm
        run: |
          which cargo || source $HOME/.cargo/env && which cargo
          make wasm
        if: steps.metadata.outputs.module == 'wasm'

      ##
      ## wasm-wasi-component
      ##

      - name: Configure wasm-wasi-component
        run: |
          which cargo || source $HOME/.cargo/env && which cargo
          ./configure wasm-wasi-component
        if: steps.metadata.outputs.module == 'wasm-wasi-component'

      - name: Make wasm-wasi-component
        run: |
          which cargo || source $HOME/.cargo/env && which cargo
          BINDGEN_EXTRA_CLANG_ARGS="-I../../njs/src -I../../njs/build" \
          make wasm-wasi-component
        if: steps.metadata.outputs.module == 'wasm-wasi-component'

      ##
      ## Tests
      ##
      - name: Run ${{ steps.metadata.outputs.module }} tests
        run: |
          PYTEST=`which pytest || which pytest-3`
          # temporary java workaround which need javac in PATH for tests to work
          if [ "${{ steps.metadata.outputs.module }}" = "java" ]; then
            JVERSION=${{ steps.metadata.outputs.version }}
            JC=`find /usr/lib/jvm -name javac | grep $JVERSION | head -1`
            test -n "$JC" && export PATH=`dirname $JC`:$PATH || :
          fi
          $PYTEST --print-log ${{ steps.metadata.outputs.testpath }}
        # Skip pytest if wasm build, as there are no tests yet
        if: steps.metadata.outputs.module != 'wasm' &&
            steps.metadata.outputs.module != 'wasm-wasi-component'

