[4mnxt_unit_..._buf_alloc[24m(3)  Library Functions Manual  [4mnxt_unit_..._buf_alloc[24m(3)

[1mName[0m
       nxt_unit_response_buf_alloc,  nxt_unit_buf_send  -  allocate buffer for
       response in Unit app

[1mLibrary[0m
       NGINX Unit library ([4mlibunit[24m, [4m‚Äêlunit[24m)

[1mSynopsis[0m
       [1m#include <nxt_unit.h>[0m

       [1m[[gnu::malloc(nxt_unit_buf_send)]][0m
       [1mnxt_unit_buf_t *_Nullable[0m
       [1mnxt_unit_response_buf_alloc(nxt_unit_request_info_t *[4m[22mreq[24m[1m, uint32_t [4m[22msize[24m[1m);[0m

       [1mint nxt_unit_buf_send(nxt_unit_buf_t *[4m[22mbuf[24m[1m);[0m

[1mArguments[0m
       [4mreq[24m    Request object.

       [4msize[24m   Size of the buffer.

       [4mbuf[24m    Buffer.

[1mDescription[0m
       [4mnxt_unit_response_buf_alloc[24m(3) allocates a buffer for a response  to  a
       request, or for a chunk of it.

       [4mnxt_unit_buf_send[24m(3)  sends and deallocates the buffer previously allo‚Äê
       cated with [4mnxt_unit_response_buf_alloc[24m(3).

[1mReturn value[0m
       [4mnxt_unit_response_buf_alloc[24m(3)
              A pointer to the allocated buffer on success, or NULL on error.

       [4mnxt_unit_buf_send[24m(3)
              0 on success, or a non‚Äêzero error code on error.

[1mErrors[0m
       Errors will be reported in the Unit debug log.

       [1mNXT_UNIT_ERROR[0m
              ‚Ä¢  [4msize[24m was too big.
              ‚Ä¢  Allocation failed.
              ‚Ä¢  Failed to share the buffer with [4munitd[24m(8).

[1mExamples[0m
       Below is a request and response pair, and the source  code  to  produce
       it.

       See  [4mnxt_unit_init[24m(3)  for an example where the [4mrequest_handler[24m() func‚Äê
       tion defined below is used.

   [1mRequest[0m
       $ [1mecho -e 'GET / HTTP/1.1\r\nHost: _\n' | ncat localhost 80;[0m
       HTTP/1.1 200 OK
       Content-Type: text/plain
       Server: Unit/1.30.0
       Date: Sat, 20 May 2023 19:08:22 GMT
       Transfer-Encoding: chunked

       22
       Hello world!
       But send this first.

       15
       Some extra contents.

       e
       And some more

       0


   [1mC code[0m
       #define _GNU_SOURCE
       #include <string.h>

       #include <nxt_unit.h>

       void
       request_handler(nxt_unit_request_info_t *req)
       {
           int             rc;
           nxt_unit_buf_t  *buf, *buf2;

           rc = nxt_unit_response_init(req, 200, 1, strlen("Content-Type")
                                                    + strlen("text/plain")
                                                    + strlen("Hello world!\n"));
           if (rc != 0) {
               goto fail;
           }

           rc = nxt_unit_response_add_field(req, "Content-Type",
                                                 strlen("Content-Type"),
                                                 "text/plain",
                                                 strlen("text/plain"));
           if (rc != 0) {
               goto fail;
           }

           rc = nxt_unit_response_add_content(req, "Hello world!\n",
                                                   strlen("Hello world!\n"));
           if (rc != 0) {
               goto fail;
           }

           rc = nxt_unit_response_send(req);
           if (rc != 0) {
               goto fail;
           }

           buf = nxt_unit_response_buf_alloc(req,
                                             strlen("Some extra contents.\n"));
           if (buf == NULL) {
               rc = NXT_UNIT_ERROR;
               goto fail;
           }

           buf2 = nxt_unit_response_buf_alloc(req,
                                              strlen("But send this first.\n"));
           if (buf2 == NULL) {
               rc = NXT_UNIT_ERROR;
               goto fail;
           }

           buf2->free = mempcpy(buf2->free, "But send this first.\n",
                                            strlen("But send this first.\n"));
           buf->free  = mempcpy(buf->free, "Some extra contents.\n",
                                           strlen("Some extra contents.\n"));

           rc = nxt_unit_buf_send(buf2);
           if (rc != 0) {
               goto fail;
           }

           rc = nxt_unit_buf_send(buf);
           if (rc != 0) {
               goto fail;
           }

           rc = nxt_unit_response_write(req, "And some more\n",
                                             strlen("And some more\n"));
           if (rc != 0) {
               goto fail;
           }

       fail:
           nxt_unit_request_done(req, rc);
       }

[1mCopyright[0m
       (C) 2017‚Äê2023, NGINX, Inc.

       SPDX‚ÄêLicense‚ÄêIdentifier: Apache‚Äê2.0

[1mSee also[0m
       [4mnxt_unit_init[24m(3),                            [4mnxt_unit_response_init[24m(3),
       [4mnxt_unit_response_write[24m(3), [4munitd[24m(8)

       Website ‚ü®https://unit.nginx.org‚ü©

       Mailing list ‚ü®https://mailman.nginx.org/mailman/listinfo/unit‚ü©

       GitHub ‚ü®https://github.com/nginx/unit‚ü©

NGINX Unit (unreleased)             (date)           [4mnxt_unit_..._buf_alloc[24m(3)
