nxt_unit_init(3)           Library Functions Manual           nxt_unit_init(3)

Name
       nxt_unit_init - initialize Unit app

Library
       NGINX Unit library (libunit, ‐lunit)

Synopsis
       #include <nxt_unit.h>

       [[gnu::malloc(nxt_unit_done)]]
       nxt_unit_ctx_t *_Nullable nxt_unit_init(nxt_unit_init_t *init);

Arguments
       init   Object that specifies how the application should work.

Description
       nxt_unit_init(3) initializes a Unit application.

       It  creates  a main context object that is necessary for most other li‐
       bunit functions.

       The next step after initializing the application  is  running  it;  for
       that, see nxt_unit_run(3).

       The  context  object  created  by  this function should be destroyed by
       passing it to nxt_unit_done(3).

Return value
       A pointer to a context object on success, or NULL on error.

Errors
       Errors will be reported in the Unit debug log.

       •  pthread_mutex_init(3) failed.
       •  nxt_unit_malloc(3) failed.
       •  init‐>callbacks.request_handler is NULL.

Examples
       #include <pthread.h>
       #include <stddef.h>
       #include <stdlib.h>
       #include <string.h>
       #include <strings.h>
       #include <sys/types.h>

       #include <nxt_unit.h>

       // See nxt_unit_response_add_field(3).
       void request_handler(nxt_unit_request_info_t *req);

       // See nxt_unit_ctx_alloc(3).
       void *worker(void *main_ctx);

       static int ready_handler(nxt_unit_ctx_t *main_ctx);

       static ssize_t  nthreads;
       static pthread_t  *threads;

       int
       main(int argc, char **argv)
       {
           int              err;
           void             *ret;
           nxt_unit_ctx_t   *ctx;
           nxt_unit_init_t  init;

           if (argc == 3 && strcmp(argv[1], "-t") == 0) {
               nthreads = atoi(argv[2]);
           }

           bzero(&init, sizeof(nxt_unit_init_t));
           init.callbacks.request_handler = &request_handler;
           init.callbacks.ready_handler = &ready_handler;

           ctx = nxt_unit_init(&init);
           if (ctx == NULL) {
               exit(EXIT_FAILURE);
           }

           err = nxt_unit_run(ctx);
           nxt_unit_debug(ctx, "main worker finished with %d code", err);

           for (ssize_t i = 0; i < nthreads; i++) {
               err = pthread_join(threads[i], &ret);

               if (err != 0) {
                   nxt_unit_alert(ctx, "pthread_join(#%zd) failed: %s (%d)",
                                       i, strerror(err), err);
               } else {
                   nxt_unit_debug(ctx, "pthread_join(#%zd) retval: %"PRIdPTR,
                                       i, (intptr_t) ret);
               }
           }

           nxt_unit_free(ctx, threads);

           nxt_unit_done(ctx);
           nxt_unit_debug(NULL, "main worker done");

           exit(EXIT_SUCCESS);
       }

       static int
       ready_handler(nxt_unit_ctx_t *ctx)
       {
           int  err;

           nxt_unit_debug(ctx, "ready");

           if (nthreads <= 1) {
               return NXT_UNIT_OK;
           }

           threads = nxt_unit_malloc(ctx, sizeof(pthread_t) * (nthreads - 1));
           if (threads == NULL) {
               return NXT_UNIT_ERROR;
           }

           // See nxt_unit_ctx_alloc(3).
           for (ssize_t i = 0; i < nthreads - 1; i++) {
               err = pthread_create(&threads[i], NULL, &worker, ctx);
               if (err != 0) {
                   return NXT_UNIT_ERROR;
               }
           }

           return NXT_UNIT_OK;
       }

Copyright
       (C) 2017‐2023, NGINX, Inc.

       SPDX‐License‐Identifier: Apache‐2.0

See also
       nxt_unit_ctx_alloc(3), nxt_unit_run(3), nxt_unit_done(3), unitd(8)

       Website ⟨https://unit.nginx.org⟩

       Mailing list ⟨https://mailman.nginx.org/mailman/listinfo/unit⟩

       GitHub ⟨https://github.com/nginx/unit⟩

NGINX Unit (unreleased)             (date)                    nxt_unit_init(3)
