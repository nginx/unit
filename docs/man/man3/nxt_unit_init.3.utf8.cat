[4mnxt_unit_init[24m(3)           Library Functions Manual           [4mnxt_unit_init[24m(3)

[1mName[0m
       nxt_unit_init - initialize Unit app

[1mLibrary[0m
       NGINX Unit library ([4mlibunit[24m, [4m‚Äêlunit[24m)

[1mSynopsis[0m
       [1m#include <nxt_unit.h>[0m

       [1m[[gnu::malloc(nxt_unit_done)]][0m
       [1mnxt_unit_ctx_t *_Nullable nxt_unit_init(nxt_unit_init_t *[4m[22minit[24m[1m);[0m

[1mArguments[0m
       [4minit[24m   Object that specifies how the application should work.

[1mDescription[0m
       [4mnxt_unit_init[24m(3) initializes a Unit application.

       It  creates  a main context object that is necessary for most other li‚Äê
       bunit functions.

       The next step after initializing the application  is  running  it;  for
       that, see [4mnxt_unit_run[24m(3).

       The  context  object  created  by  this function should be destroyed by
       passing it to [4mnxt_unit_done[24m(3).

[1mReturn value[0m
       A pointer to a context object on success, or NULL on error.

[1mErrors[0m
       Errors will be reported in the Unit debug log.

       ‚Ä¢  [4mpthread_mutex_init[24m(3) failed.
       ‚Ä¢  [4mnxt_unit_malloc[24m(3) failed.
       ‚Ä¢  [4minit‚Äê>callbacks.request_handler[24m is NULL.

[1mExamples[0m
       #include <pthread.h>
       #include <stddef.h>
       #include <stdlib.h>
       #include <string.h>
       #include <strings.h>
       #include <sys/types.h>

       #include <nxt_unit.h>

       // See [4mnxt_unit_response_add_field[24m(3).
       void request_handler(nxt_unit_request_info_t *req);

       // See [4mnxt_unit_ctx_alloc[24m(3).
       void *worker(void *main_ctx);

       static int ready_handler(nxt_unit_ctx_t *main_ctx);

       static ssize_t  nthreads;
       static pthread_t  *threads;

       int
       main(int argc, char **argv)
       {
           int              err;
           void             *ret;
           nxt_unit_ctx_t   *ctx;
           nxt_unit_init_t  init;

           if (argc == 3 && strcmp(argv[1], "-t") == 0) {
               nthreads = atoi(argv[2]);
           }

           bzero(&init, sizeof(nxt_unit_init_t));
           init.callbacks.request_handler = &request_handler;
           init.callbacks.ready_handler = &ready_handler;

           ctx = nxt_unit_init(&init);
           if (ctx == NULL) {
               exit(EXIT_FAILURE);
           }

           err = nxt_unit_run(ctx);
           nxt_unit_debug(ctx, "main worker finished with %d code", err);

           for (ssize_t i = 0; i < nthreads; i++) {
               err = pthread_join(threads[i], &ret);

               if (err != 0) {
                   nxt_unit_alert(ctx, "pthread_join(#%zd) failed: %s (%d)",
                                       i, strerror(err), err);
               } else {
                   nxt_unit_debug(ctx, "pthread_join(#%zd) retval: %"PRIdPTR,
                                       i, (intptr_t) ret);
               }
           }

           nxt_unit_free(ctx, threads);

           nxt_unit_done(ctx);
           nxt_unit_debug(NULL, "main worker done");

           exit(EXIT_SUCCESS);
       }

       static int
       ready_handler(nxt_unit_ctx_t *ctx)
       {
           int  err;

           nxt_unit_debug(ctx, "ready");

           if (nthreads <= 1) {
               return NXT_UNIT_OK;
           }

           threads = nxt_unit_malloc(ctx, sizeof(pthread_t) * (nthreads - 1));
           if (threads == NULL) {
               return NXT_UNIT_ERROR;
           }

           // See [4mnxt_unit_ctx_alloc[24m(3).
           for (ssize_t i = 0; i < nthreads - 1; i++) {
               err = pthread_create(&threads[i], NULL, &worker, ctx);
               if (err != 0) {
                   return NXT_UNIT_ERROR;
               }
           }

           return NXT_UNIT_OK;
       }

[1mCopyright[0m
       (C) 2017‚Äê2023, NGINX, Inc.

       SPDX‚ÄêLicense‚ÄêIdentifier: Apache‚Äê2.0

[1mSee also[0m
       [4mnxt_unit_ctx_alloc[24m(3), [4mnxt_unit_run[24m(3), [4mnxt_unit_done[24m(3), [4munitd[24m(8)

       Website ‚ü®https://unit.nginx.org‚ü©

       Mailing list ‚ü®https://mailman.nginx.org/mailman/listinfo/unit‚ü©

       GitHub ‚ü®https://github.com/nginx/unit‚ü©

NGINX Unit (unreleased)             (date)                    [4mnxt_unit_init[24m(3)
