[4mnxt_unit_ctx_alloc[24m(3)      Library Functions Manual      [4mnxt_unit_ctx_alloc[24m(3)

[1mName[0m
       nxt_unit_ctx_alloc - create context object for Unit app thread

[1mLibrary[0m
       NGINX Unit library ([4mlibunit[24m, [4m‚Äêlunit[24m)

[1mSynopsis[0m
       [1m#include <nxt_unit.h>[0m

       [1m[[gnu::malloc(nxt_unit_done)]][0m
       [1mnxt_unit_ctx_t *_Nullable nxt_unit_ctx_alloc(nxt_unit_ctx_t *[4m[22mctx[24m[1m,[0m
                                                    [1mvoid *_Nullable [4m[22mdata[24m[1m);[0m

[1mArguments[0m
       [4mctx[24m    Main  context  object  for the application.  It should have been
              created with [4mnxt_unit_init[24m(3).

       [4mdata[24m   XXX

[1mDescription[0m
       [4mnxt_unit_ctx_alloc[24m(3) creates a context object that will be used for  a
       worker thread.

       The next step after creating a thread context object is running the ap‚Äê
       plication thread; for that, see [4mnxt_unit_run[24m(3).

       The  context  object  created  by  this function should be destroyed by
       passing it to [4mnxt_unit_done[24m(3).

[1mReturn value[0m
       A pointer to a context object on success, or NULL on error.

[1mErrors[0m
       Errors will be reported in the Unit debug log.

       ‚Ä¢  [4mpthread_mutex_init[24m(3) failed.
       ‚Ä¢  [4msocketpair[24m(2) failed.
       ‚Ä¢  [4msetsockopt[24m(2) failed.
       ‚Ä¢  [4mmemfd_create[24m(2) failed.
       ‚Ä¢  [4mshm_open[24m(2) failed.
       ‚Ä¢  [4mftruncate[24m(2) failed.
       ‚Ä¢  [4mmmap[24m(2) failed.
       ‚Ä¢  [4msendmsg[24m(2) failed.
       ‚Ä¢  [4mnxt_unit_malloc[24m(3) failed.
       ‚Ä¢  [4mnxt_unit_init_t::callbacks.port_send[24m failed.
       ‚Ä¢  Internal hash table failure.

[1mExamples[0m
       See [4mnxt_unit_init[24m(3) for an example where  this  [4mworker[24m()  function  is
       used.

       #include <pthread.h>
       #include <stddef.h>
       #include <stdint.h>

       #include <nxt_unit.h>

       void *
       worker(void *main_ctx)
       {
           int             rc;
           nxt_unit_ctx_t  *ctx;

           ctx = nxt_unit_ctx_alloc(main_ctx, NULL);
           if (ctx == NULL) {
               pthread_exit(NULL);
           }

           nxt_unit_debug(ctx, "start worker");
           rc = nxt_unit_run(ctx);
           nxt_unit_debug(ctx, "worker finished with %d code", rc);

           nxt_unit_done(ctx);

           pthread_exit((void *) (intptr_t) rc);
       }

[1mCopyright[0m
       (C) 2017‚Äê2023, NGINX, Inc.

       SPDX‚ÄêLicense‚ÄêIdentifier: Apache‚Äê2.0

[1mSee also[0m
       [4mnxt_unit_done[24m(3),  [4mnxt_unit_run[24m(3), [4mpthread_create[24m(3), [4mpthread_exit[24m(3),
       [4munitd[24m(8)

       Website ‚ü®https://unit.nginx.org‚ü©

       Mailing list ‚ü®https://mailman.nginx.org/mailman/listinfo/unit‚ü©

       GitHub ‚ü®https://github.com/nginx/unit‚ü©

NGINX Unit (unreleased)             (date)               [4mnxt_unit_ctx_alloc[24m(3)
